// Code generated by MockGen. DO NOT EDIT.
// Source: monitoring.go

// Package monitoring is a generated GoMock package.
package monitoring

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/krpn/youtrack-issues-prometheus-exporter/model"
	reflect "reflect"
)

// MockgetIssueser is a mock of getIssueser interface
type MockgetIssueser struct {
	ctrl     *gomock.Controller
	recorder *MockgetIssueserMockRecorder
}

// MockgetIssueserMockRecorder is the mock recorder for MockgetIssueser
type MockgetIssueserMockRecorder struct {
	mock *MockgetIssueser
}

// NewMockgetIssueser creates a new mock instance
func NewMockgetIssueser(ctrl *gomock.Controller) *MockgetIssueser {
	mock := &MockgetIssueser{ctrl: ctrl}
	mock.recorder = &MockgetIssueserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgetIssueser) EXPECT() *MockgetIssueserMockRecorder {
	return m.recorder
}

// GetIssues mocks base method
func (m *MockgetIssueser) GetIssues(query string) (map[string]model.Issue, error) {
	ret := m.ctrl.Call(m, "GetIssues", query)
	ret0, _ := ret[0].(map[string]model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssues indicates an expected call of GetIssues
func (mr *MockgetIssueserMockRecorder) GetIssues(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockgetIssueser)(nil).GetIssues), query)
}

// Mockmetricser is a mock of metricser interface
type Mockmetricser struct {
	ctrl     *gomock.Controller
	recorder *MockmetricserMockRecorder
}

// MockmetricserMockRecorder is the mock recorder for Mockmetricser
type MockmetricserMockRecorder struct {
	mock *Mockmetricser
}

// NewMockmetricser creates a new mock instance
func NewMockmetricser(ctrl *gomock.Controller) *Mockmetricser {
	mock := &Mockmetricser{ctrl: ctrl}
	mock.recorder = &MockmetricserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockmetricser) EXPECT() *MockmetricserMockRecorder {
	return m.recorder
}

// EnableMonitoring mocks base method
func (m *Mockmetricser) EnableMonitoring(queryName string, issue model.Issue) {
	m.ctrl.Call(m, "EnableMonitoring", queryName, issue)
}

// EnableMonitoring indicates an expected call of EnableMonitoring
func (mr *MockmetricserMockRecorder) EnableMonitoring(queryName, issue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableMonitoring", reflect.TypeOf((*Mockmetricser)(nil).EnableMonitoring), queryName, issue)
}

// DisableMonitoring mocks base method
func (m *Mockmetricser) DisableMonitoring(queryName string, issue model.Issue) {
	m.ctrl.Call(m, "DisableMonitoring", queryName, issue)
}

// DisableMonitoring indicates an expected call of DisableMonitoring
func (mr *MockmetricserMockRecorder) DisableMonitoring(queryName, issue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableMonitoring", reflect.TypeOf((*Mockmetricser)(nil).DisableMonitoring), queryName, issue)
}

// ErrorInc mocks base method
func (m *Mockmetricser) ErrorInc(queryName string, err error) {
	m.ctrl.Call(m, "ErrorInc", queryName, err)
}

// ErrorInc indicates an expected call of ErrorInc
func (mr *MockmetricserMockRecorder) ErrorInc(queryName, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorInc", reflect.TypeOf((*Mockmetricser)(nil).ErrorInc), queryName, err)
}
