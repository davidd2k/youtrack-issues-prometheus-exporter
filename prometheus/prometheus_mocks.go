// Code generated by MockGen. DO NOT EDIT.
// Source: prometheus.go

// Package prometheus is a generated GoMock package.
package prometheus

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockcounterIniter is a mock of counterIniter interface
type MockcounterIniter struct {
	ctrl     *gomock.Controller
	recorder *MockcounterIniterMockRecorder
}

// MockcounterIniterMockRecorder is the mock recorder for MockcounterIniter
type MockcounterIniterMockRecorder struct {
	mock *MockcounterIniter
}

// NewMockcounterIniter creates a new mock instance
func NewMockcounterIniter(ctrl *gomock.Controller) *MockcounterIniter {
	mock := &MockcounterIniter{ctrl: ctrl}
	mock.recorder = &MockcounterIniterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcounterIniter) EXPECT() *MockcounterIniterMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method
func (m *MockcounterIniter) WithLabelValues(lvs ...string) prometheus.Counter {
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues
func (mr *MockcounterIniterMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockcounterIniter)(nil).WithLabelValues), lvs...)
}

// MockgaugeIniter is a mock of gaugeIniter interface
type MockgaugeIniter struct {
	ctrl     *gomock.Controller
	recorder *MockgaugeIniterMockRecorder
}

// MockgaugeIniterMockRecorder is the mock recorder for MockgaugeIniter
type MockgaugeIniterMockRecorder struct {
	mock *MockgaugeIniter
}

// NewMockgaugeIniter creates a new mock instance
func NewMockgaugeIniter(ctrl *gomock.Controller) *MockgaugeIniter {
	mock := &MockgaugeIniter{ctrl: ctrl}
	mock.recorder = &MockgaugeIniterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgaugeIniter) EXPECT() *MockgaugeIniterMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method
func (m *MockgaugeIniter) WithLabelValues(lvs ...string) prometheus.Gauge {
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues
func (mr *MockgaugeIniterMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockgaugeIniter)(nil).WithLabelValues), lvs...)
}
